var htmlTemplates=htmlTemplates||{};htmlTemplates["ionic-validation-directive-template.html"]='<ng-form>\n    <div class="validation-item-container item" ng-class="{ \'has-error\': formInvalid && (formTouched || formSubmitted) }">\n        <div class="item-container">\n            <ng-transclude></ng-transclude>\n            \n            <div class="item error-message" role="alert" ng-messages="formCtrl.$error" ng-show="formCtrl.$invalid && (formTouched || formSubmitted) && showErrorMessage">\n                <div ng-message-exp="key" ng-repeat="(key, value) in errors">\n                    {{ value }}\n                </div>\n            </div>\n        </div>\n        \n        <div class="icon-container">\n            <i class="icon ion-alert-circled assertive error-icon" ng-show="formInvalid && (formTouched || formSubmitted)" on-touch="showErrorMessage = !showErrorMessage"></i>\n        </div>\n    </div>\n</ng-form>\n\n',function(){"use strict";angular.module("ionic-validation-directive",[]).directive("validationItem",function(){return{restrict:"E",require:"form",replace:!0,transclude:!0,template:htmlTemplates["ionic-validation-directive-template.html"],scope:{errors:"="},link:function(scope,element,attrs,formCtrl){scope.formCtrl=formCtrl,scope.formTouched=!1,scope.formSubmitted=!1,scope.showErrorMessage=!1,scope.$on("formSubmitted",function(e,submitted){scope.formSubmitted=submitted}),scope.$on("formTouched",function(e,touched){scope.formTouched=touched}),scope.$watch("formCtrl.$invalid",function(newVal,oldVal){scope.$applyAsync(function(scope){scope.formInvalid=newVal}),newVal===!1&&(scope.showErrorMessage=!1)}),angular.forEach(formCtrl,function(value,key){"object"==typeof value&&value.hasOwnProperty("$modelValue")&&scope.$watch(function(){return value.$touched},function(newVal,oldVal){newVal&&(scope.formTouched=!0)})})}}})}();